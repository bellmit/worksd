package com.service;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

import javax.sound.midi.MidiDevice.Info;

import org.apache.log4j.Logger;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.JdbcTemplate;
import com.thinkive.base.jdbc.connection.Configure;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.service.BaseService;
import com.thinkive.base.util.DateHelper;
import com.thinkive.base.util.StringHelper;
import com.util.SendMsg;

/**
 * 理财利息计算
 * @author Administrator
 *
 */
public class DealmakingService extends BaseService
{
	private static Logger logger = Logger.getLogger(DealmakingService.class);
	public static String code1Str = "到期还本付息";
	public static String code1 = "100";
	public static String code2Str = "理财分期付息";
	public static String code2 = "101";
	public static String code3Str = "随存随取利息";
	public static String code3 = "103";
	
	
	public static void main(String[] args) 
	{	
		new DealmakingService().chdc();
//		new DealmakingService().chhq();
	}
	/***
	 * 撮合定存理财利息计算
	 */
	public void chdc()
	{
		logger.info("定期利息计算");
		JdbcTemplate template = new JdbcTemplate();
	    Date  investTime = new Date();		
	    String curdate = DateHelper.formatDate(investTime, "yyyyMMdd");		
		String sql = "";
		String id = "select MIN(id) as idmin,MAX(id) as maxid from t_current_invest where DATE_FORMAT(DATE_ADD(investTime,INTERVAL hasDeadline month),'%Y%m%d') = '"+curdate+"' and flag = 0";
		DataRow numData = template.queryMap(id);
		if(numData!=null)
		{
			
			int idmin = numData.getInt("idmin");
			int maxid = numData.getInt("maxid");
			int tempnum = idmin+100;
			sql = getDcSql(curdate,idmin,tempnum);
			logger.info(tempnum+"-----"+maxid);
			List<DataRow> list = template.query(sql);
			logger.info("list.size:"+list.size());
			while(tempnum<maxid||list.size()>0)
			{
				logger.info("定期利息更新数据~~~");
				updateLx(list,curdate,template);
				sql = getDcSql(curdate,tempnum,tempnum=tempnum+100);
				list = template.query(sql);
				logger.info("list.size:"+list.size());
				try {
					Thread.sleep(5000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
	
	/**
	 * 获取定存SQL
	 * @param curdate
	 * @param idmin
	 * @param max
	 * @return
	 */
	public String getDcSql(String curdate,int idmin,int max)
	{
		logger.info(idmin+"----"+max);
		return "select * from t_current_invest where DATE_FORMAT(DATE_ADD(investTime,INTERVAL hasDeadline month),'%Y%m%d') = '"+curdate+"' and flag = 0 and id >= "+idmin+" and id <= "+max;
	}
	
	/**
	 * 获取活期随存随取
	 * @param curdate
	 * @param idmin
	 * @param max
	 * @return
	 */
	public String getHqSql(String nlv,int idmin,int max)
	{
		logger.info(idmin+"----"+max);
		return "select a.userid,a.money,(a.lx+a.money) bj,a.lx,a.sxdate,a.investtime from (select userid,money,ROUND((money*"+nlv+"/100/365),2) lx,DATE_FORMAT(sxdate,'%Y%m%d') as sxdate,DATE_FORMAT(investtime,'%Y%m%d') as investtime   from t_current_scsq_user  where id >= "+idmin+" and id <= "+max+" ) a";
	}
	
	/**
	 * 进行计算利息
	 * @param list
	 * @param repayDate
	 */
	public void updateLx(List<DataRow> list,String repayDate,JdbcTemplate template)
	{
		for (DataRow dataRow : list) 
		{
			//获取当前的期数，根据是否是分期利息转入余额中，如果是计算当期利息并修改已还分期数，
			//如果是一个月的算完利息将本金和利息打入到余额当中
			//如果是多期分期返回利息的则计算当期利息并修改已还分期数
			//如果分期到期后算完利息后将本金和最后一次利息打入到余额当中
			String borrow_id = dataRow.getString("id");
			//根据投资id获取投资用户的姓名 和投资项目名称 手机号 
			String  realName = template.queryString("select cardUserName  from t_bankcard  left join  t_current_invest  on t_bankcard.userId  =   t_current_invest.investor where  t_current_invest.id= "+borrow_id);
		    String  productName = template.queryString("select t_current.name from  t_current_invest  left join t_current on t_current_invest.currentId = t_current.id  where   t_current_invest.id = "+borrow_id);	
			String  mobilePhone = template.queryString("select t_user.mobilePhone from  t_current_invest  left join t_user on t_current_invest.investor  = t_user.id  where   t_current_invest.id =" +borrow_id);
		    logger.info("真实姓名："+realName +"产品名称："+productName+"投资人电话号码："+mobilePhone);
		    if(dataRow.getInt("deadline")==1)
			{
		    	
				logger.info("1期理财结算利息");
                try 
                {
                	dataRow.set("haspi", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));//已收本息
    				dataRow.set("hasdeadline", 1);//已收本息
    				dataRow.set("hasprincipal", dataRow.getDouble("recivedprincipal"));//已收本金
    				dataRow.set("hasinterest", dataRow.getDouble("recievedinterest"));//已收利息
    				dataRow.set("repaystatus", 2);//是否到期
    				dataRow.set("flag", 1);//已结束理财
    				dataRow.set("sxdate", new Date());//算息日期
                	//更新理财状态
                	template.update("t_current_invest", dataRow, "id", dataRow.getInt("id"));
                	
                	//用户资金返回
                	logger.info("用户资金返回");
                	updateUserMoney(dataRow,template);
                	SendMsg.tplSendSms(1342213,"#name#="+realName+"&#product#="+productName,mobilePhone);
                
                	
                } catch (Exception e) {
                	DataRow log = new DataRow();
                	log.set("name", "用户理财结算利息");
                	log.set("userid", dataRow.getString("investor"));
                	log.set("xg_id", dataRow.getString("id"));
                	log.set("xg_table", "t_current_invest");
                	log.set("time", new Date());
                	log.set("cwms", e.toString());
                	template.insert("t_current_log", log);
                	e.printStackTrace();
					logger.error(e);
				}
                try {
                	DataRow fundrecord = new DataRow();//添加资金流向
                	fundrecord.set("userId", dataRow.getString("investor"));
                	fundrecord.set("fundmode", code1Str);
                	fundrecord.set("handleSum", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));
                	fundrecord.set("usableSum", 0);
                	fundrecord.set("freezeSum", 0);
                	fundrecord.set("dueinSum", 0);
                	fundrecord.set("recordTime", new Date());
                	fundrecord.set("operatetype", code1);
                	fundrecord.set("income", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));
                	fundrecord.set("borrow_id", borrow_id);
                	template.insert("t_fundrecord", fundrecord);
				} catch (Exception e) {
					DataRow log = new DataRow();
                	log.set("name", "用户添加资金流向");
                	log.set("userid", dataRow.getString("investor"));
                	log.set("xg_id", -1);
                	log.set("xg_table", "t_fundrecord");
                	log.set("time", new Date());
                	log.set("cwms", e.toString());
                	template.insert("t_current_log", log);
                	e.printStackTrace();
					logger.error(e);
				}
				//推送微信通知
				
				
				
			}
			else
			{
				//进行分期返回利息
				if(dataRow.getInt("isautobid")==1)
				{
					
					double deadline = dataRow.getDouble("deadline");//期数
					logger.info(deadline+"期理财分期结算利息");
					double recievedInterest = dataRow.getDouble("recievedinterest");//利息
					DecimalFormat df = new DecimalFormat("#.##");
					double d = recievedInterest/deadline;
					String hasInterest = df.format(d);
					double  hasinterest = dataRow.getDouble("hasinterest");
					String type = "";
					try 
					{
	    				dataRow.set("hasinterest", dataRow.getDouble("hasinterest")+Double.valueOf(hasInterest));//已收利息
	    				logger.info(dataRow.getString("deadline")+"??????????????"+dataRow.getString("hasdeadline"));
//	    				if((hasinterest+Double.valueOf(hasInterest))>=recievedInterest)
	    				if(dataRow.getString("deadline").equals(dataRow.getString("hasdeadline") ))
	    				{
	    					dataRow.set("repaystatus", 2);//是否到期
	        				dataRow.set("flag", 1);//已结束理财
	        				//本金将归还
	        				dataRow.set("hasprincipal", dataRow.getDouble("recivedprincipal"));
	        				type = "2";
	        				SendMsg.tplSendSms(1342213,"#name#="+realName+"&#product#="+productName,mobilePhone);
	    				}
	    				else
	    				{
	    					dataRow.set("hasdeadline", dataRow.getInt("hasdeadline")+1);//已收利息期数
	    					type = "1";
	    				}
	    				dataRow.set("sxdate", new Date());//算息日期
	                	//更新理财状态
	                	template.update("t_current_invest", dataRow, "id", dataRow.getInt("id"));
	                	
	                	//用户资金返回
	                	logger.info("用户资金返回");
	                	updateUserMoneyLx(dataRow, template, type , hasInterest,realName,productName,mobilePhone);
					} catch (Exception e) {
						DataRow log = new DataRow();
	                	log.set("name", "用户理财分期结算利息");
	                	log.set("userid", dataRow.getString("investor"));
	                	log.set("xg_id", dataRow.getString("id"));
	                	log.set("xg_table", "t_current_invest");
	                	log.set("time", new Date());
	                	log.set("cwms", e.toString());
	                	template.insert("t_current_log", log);
	                	e.printStackTrace();
						logger.error(e);
					}
					try {
						DataRow fundrecord = new DataRow();//添加资金流向
	                	fundrecord.set("userId", dataRow.getString("investor"));
	                	fundrecord.set("fundmode", code2Str);
	                	fundrecord.set("handleSum", hasInterest);
	                	fundrecord.set("usableSum", 0);
	                	fundrecord.set("freezeSum", 0);
	                	fundrecord.set("dueinSum", 0);
	                	fundrecord.set("recordTime", new Date());
	                	fundrecord.set("operatetype", code2);
	                	fundrecord.set("income", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));
	                	fundrecord.set("borrow_id", borrow_id);
	                	template.insert("t_fundrecord", fundrecord);
					} catch (Exception e) {
						DataRow log = new DataRow();
	                	log.set("name", "用户添加资金流向");
	                	log.set("userid", dataRow.getString("investor"));
	                	log.set("xg_id", -1);
	                	log.set("xg_table", "t_fundrecord");
	                	log.set("time", new Date());
	                	log.set("cwms", e.toString());
	                	template.insert("t_current_log", log);
	                	e.printStackTrace();
						logger.error(e);
					}
				}
				//否则看是否已到一次性还本息的结束日期
				else
				{
				   String tempdate = DateHelper.formatDate(DateHelper.parseString(dataRow.getString("repaydate")), "yyyyMMdd");
				   if(repayDate.equals(tempdate))
				   {
					   try 
		                {
						    logger.info(dataRow.getDouble("deadline")+"期理财还本付息结算利息");
		                	dataRow.set("haspi", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));//已收本息
		    				dataRow.set("hasdeadline", dataRow.getInt("hasdeadline"));//已收本息
		    				dataRow.set("hasprincipal", dataRow.getDouble("recivedprincipal"));//已收本金
		    				dataRow.set("hasinterest", dataRow.getDouble("recievedinterest"));//已收利息
		    				dataRow.set("repaystatus", 2);//是否到期
		    				dataRow.set("flag", 1);//已结束理财
		    				dataRow.set("sxdate", new Date());//算息日期
		                	//更新理财状态
		                	template.update("t_current_invest", dataRow, "id", dataRow.getInt("id"));
		                	
		                	//用户资金返回
		                	logger.info("用户资金返回");
		                	updateUserMoney(dataRow, template);
		                	SendMsg.tplSendSms(1342213,"#name#="+realName+"&#product#="+productName,mobilePhone);
		                } catch (Exception e) {
		                	DataRow log = new DataRow();
		                	log.set("name", "用户理财结算利息");
		                	log.set("userid", dataRow.getString("investor"));
		                	log.set("xg_id", dataRow.getString("id"));
		                	log.set("xg_table", "t_current_invest");
		                	log.set("time", new Date());
		                	log.set("cwms", e.toString());
		                	template.insert("t_current_log", log);
		                	e.printStackTrace();
							logger.error(e);
						}
					   try {
		                	DataRow fundrecord = new DataRow();//添加资金流向
		                	fundrecord.set("userId", dataRow.getString("investor"));
		                	fundrecord.set("fundmode", code1Str);
		                	fundrecord.set("handleSum", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));
		                	fundrecord.set("usableSum", 0);
		                	fundrecord.set("freezeSum", 0);
		                	fundrecord.set("dueinSum", 0);
		                	fundrecord.set("recordTime", new Date());
		                	fundrecord.set("operatetype", code1);
		                	fundrecord.set("income", dataRow.getDouble("recivedprincipal")+dataRow.getDouble("recievedinterest"));
		                	fundrecord.set("borrow_id", borrow_id);
		                	template.insert("t_fundrecord", fundrecord);
						} catch (Exception e) {
							DataRow log = new DataRow();
		                	log.set("name", "用户添加资金流向");
		                	log.set("userid", dataRow.getString("investor"));
		                	log.set("xg_id", -1);
		                	log.set("xg_table", "t_fundrecord");
		                	log.set("time", new Date());
		                	log.set("cwms", e.toString());
		                	template.insert("t_current_log", log);
		                	e.printStackTrace();
							logger.error(e);
						}
				   }
				   else
				   {
					   //一次还本付息增加月数
					   dataRow.set("hasdeadline", dataRow.getInt("hasdeadline")+1);//已收利息期数
					   template.update("t_current_invest", dataRow, "id", dataRow.getInt("id"));
				   }
				}
			}
		}
	}
	
	/**
	 * 更新用户资金
	 */
	public void updateUserMoney(DataRow row,JdbcTemplate template)
	{
		DataRow user = template.queryMap("select  * from t_user where id = "+row.getString("investor"));
		user.set("usablesum", user.getDouble("usablesum")+row.getDouble("investamount")+row.getDouble("recievedinterest"));
		user.set("freezesum", user.getDouble("freezesum")-row.getDouble("investamount"));
		template.update("t_user", user, "id", user.getString("id"));
	}

	/**
	 * 更新用户资金(返回利息)
	 * @throws IOException 
	 */
	public void updateUserMoneyLx(DataRow row,JdbcTemplate template,String type,String hasInterest,String realName ,String productName ,String mobilePhone ) throws IOException
	{
		
		DataRow user = template.queryMap("select  * from t_user where id = "+row.getString("investor"));
		String money ="";
		if(type.equals("1"))//只返回利息
		{
			user.set("usablesum", user.getDouble("usablesum")+Double.valueOf(hasInterest));
			money = Double.valueOf(hasInterest)+"";
		}
		else if(type.equals("2"))//返回最后一期利息加本金
		{
			user.set("usablesum", user.getDouble("usablesum")+Double.valueOf(hasInterest)+row.getDouble("investamount"));
			user.set("freezesum", user.getDouble("freezesum")-row.getDouble("investamount"));
			money =Double.valueOf(hasInterest)+"";
		}
		template.update("t_user", user, "id", user.getString("id"));
		if(money.length()>money.indexOf(".")+3 &&money.indexOf(".")!=-1){
		     money = money.substring(0,money.indexOf(".")+3);
		 }
		SendMsg.tplSendSms(1524196,"#name#="+realName+"&#product#="+productName+"&#money#="+money,mobilePhone); 
	}
	
	/**
	 * 进行随存随取计算利息
	 * @param list
	 * @param repayDate
	 */
	public void updateHqLx(List<DataRow> list,String repayDate,String nlv)
	{
		Session session = getSession();
		session.beginTrans();
		try {
			for (DataRow dataRow : list) 
			{
				String investtime = dataRow.getString("investtime");
				//如果为空则是第一次要算息
				if(StringHelper.isEmpty(dataRow.getString("sxdate")))
				{
					if(investtime.equals(repayDate))
					{
						double money = dataRow.getDouble("money");
						DataRow hquser = new DataRow();
						hquser.set("money", dataRow.getDouble("bj"));
						hquser.set("sxdate", repayDate);//算息日期
						session.update("t_current_scsq_user", hquser, "userid", dataRow.getInt("userid"));
						DataRow fundrecord = new DataRow();//添加资金流向
			        	fundrecord.set("userid", dataRow.getInt("userid"));
			        	fundrecord.set("fundmode", "活期利息结算");
			        	fundrecord.set("fundcode", 105);
			        	fundrecord.set("handlesum", dataRow.getDouble("lx"));
			        	fundrecord.set("usablesum", money);
			        	fundrecord.set("dqlv", nlv);
			        	fundrecord.set("czdate", repayDate);
			        	session.insert("t_current_scsq_list", fundrecord);
					}
					else
					{
						logger.info("用户第一次结算不在当前算息日期");
					}
				}
				//当前日期不等于算息日期则计算
				else 
				{
					if(!repayDate.equals(dataRow.getString("sxdate")))
					{
						double money = dataRow.getDouble("money");
						DataRow hquser = new DataRow();
						hquser.set("money", dataRow.getDouble("bj"));
						hquser.set("sxdate", repayDate);//算息日期
						session.update("t_current_scsq_user", hquser, "userid", dataRow.getInt("userid"));
						DataRow fundrecord = new DataRow();//添加资金流向
			        	fundrecord.set("userid", dataRow.getInt("userid"));
			        	fundrecord.set("fundmode", "活期利息结算");
			        	fundrecord.set("fundcode", 105);
			        	fundrecord.set("handlesum", dataRow.getDouble("lx"));
			        	fundrecord.set("usablesum", money);
			        	fundrecord.set("dqlv", nlv);
			        	fundrecord.set("czdate", repayDate);
			        	session.insert("t_current_scsq_list", fundrecord);
					}
		        	else
					{
						logger.info("此用户已计算过利息："+dataRow);
					}
				}
				
			}
			session.commitTrans();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			session.rollbackTrans();
			logger.error(e);
		}finally{session.close();}
		
	}
	
	/**
	 * 撮合活期
	 */
	public void chhq()
	{
		/*try {
			JdbcTemplate template = new JdbcTemplate();
			//String curdate = "2015-03-20 10:32:51";//
			//Date date = DateHelper.parseString(new Date());
			
			String sxdate = DateHelper.formatDate(DateHelper.getDataDiff(new Date(), 1), "yyyyMMdd");//DateHelper.formatDate(new Date(),"yyyyMMdd");
			logger.info("sxdate:"+sxdate);
//			sxdate = "20150929";
			String id = "select MIN(id) as idmin,MAX(id) as maxid from t_current_scsq_user";
			DataRow numData = template.queryMap(id);
	//		if(StringHelper.isNotEmpty(isjx))
	//		{
	//			logger.info(sxdate+"活期利息已计算不需要再次计算");
	//			return;
	//		}
			if(numData!=null)
			{
				int idmin = numData.getInt("idmin");
				int maxid = numData.getInt("maxid");
				int tempnum = idmin+100;
				String nlv = template.queryString("select nlv from t_current_nlv_list where DATE_FORMAT(time,'%Y%m%d') = '"+sxdate+"'");
				String sql = getHqSql(nlv,idmin,tempnum=tempnum+100);
				List<DataRow> list = template.query(sql);
				logger.info("活期利息计算分页list.size:"+list.size());
				int count = 0;
				while(tempnum<maxid||list.size()>0)
				{
					logger.info("更新活期数据~~~");
					updateHqLx(list,sxdate,nlv);
					sql = getHqSql(nlv,tempnum,tempnum=tempnum+100);
					list = template.query(sql);
					logger.info("list.size:"+list.size());
					Thread.sleep(5000);
				}
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			logger.error(e);
		}*/
	}
}
